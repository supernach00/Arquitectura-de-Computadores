/Proyecto Integrador: Algoritmos de ordenamiento
/Proponga un programa que ordene en forma creciente un vector de números enteros de
/16 bits en Ca2. La longitud del vector se encuentra almacenada en la posición de
/memoria 0x001 y el vector comienza en la dirección 0x002. El resultado del
/programa debe ser almacenado en la misma ubicación del vector original.

/ Algoritmo de ordenamiento en MARIE
/ Ignacio Nahuel Chantiri, 69869/1
/ Algoritmo utilizado: Quick Sort
/ Ocupación de memoria de programa: ...
/ Ocupación de memoria de datos (sin incluir el vector): ...
/ Performance
/ Vector ordenado    -3,-2,-1,0,1,2,3 : ... instrucciones
/ Vector invertido   3,2,1,0,-1,-2,-3 : ... instrucciones
/ Vector desordenado 0,-2,1,3,-1,2,-3 : ... instrucciones

 		ORG 000
        Jump QuickSort /000
        largo, DEC 7 /001
        DEC 3 /002
        DEC 2 /003 posicionA incial 
        DEC 1/004 posicionB inicial
        DEC 0/005
        DEC -1 /006
        DEC -2 /007
        DEC -3 /008

izq,DEC 0 / indica el número a comparar con el pivote
pivote, DEC 0 
pila,   HEX FFF
uno,    DEC 1
der, DEC 0
dos, DEC 2
aux, DEC 0
X, DEC 0

pivotePos, DEC 0

QuickSort,Load largo
		Subt uno   /(1,2,3,4,5,6,7)
		Store der  / I         D P
		Load uno
		Store izq

		/Defino la posición del pivote
		Load largo
        Store pivote /El pivote es el ultimo elemento

		/Guardo la posición original del pivote
		Store pivotePos
		
checkIzquierda,Loadi izq /Busco el primer elemento que sea menor al pivote
		Subt pivote 
		SkipCond 000 /Si izq-pivote es negativo, signfica que Pivote es mayor que el elemento, sigo buscando
		Jump checkDerecha
		Load izq
		Add uno
		Store izq
		Jump checkIzquierda
		/Permuto
		
checkDerecha,Load der /Este bloque busca el primer elemento menor que el pivote
		Subt pivote
		SkipCond 800 /Si el numero es mayor que el pivote, sigo buscando
		Jump checkCruce /Cada vez que muevo el puntero der, tengo que ver si crucé el izquierdo
		Load der
		Subt uno
		Jump checkIzquierda

checkCruce, Load izq /Este bloque verifica si izq y der se cruzaron
            Subt der 
            SkipCond 000     / Skipeo si izq >= der
            Jump salir     / Salgo si se cruzaron

            / Si son iguales, no swapeo
            SkipCond 010       / izq - der == 0
            Jump permuta       / Solo si NO son iguales
            Jump checkIzquierda
			
permuta,    Loadi izq
			Store aux
			Loadi der
			Storei izq
			Load aux
			Storei der
			
salir,      Loadi der /Ubico el pivote en donde se cruzaron der e izq
            Store aux

            Load pivote
			Storei der

			Load aux
			Storei pivotePos

		    Load izq          / Cargamos la posición inicial del subarreglo izquierdo
      	    Subt pivotePos    / Comprobamos si hay más de un elemento en el subarreglo izquierdo
     	    SkipCond 800      / Si izq >= pivotePos, no hay subarreglo a la izquierda
     	    Jump recursivoIzq

     	    Load der          / Cargamos la posición final del subarreglo derecho
     	    Subt pivotePos    / Comprobamos si hay más de un elemento en el subarreglo derecho
    	    SkipCond 800      / Si der <= pivotePos, no hay subarreglo a la derecha
      	 	Jump recursivoDer

			
recursivoIzq,Load izq
            Store largo       / Guardamos la posición de inicio del subarreglo izquierdo
            Load pivotePos
            Store der         / Guardamos la posición de fin del subarreglo izquierdo
            Jump quickSort    / Llamada recursiva para el subarreglo izquierdo
			
recursivoDer,Load pivotePos
            Store izq         / Guardamos la posición de inicio del subarreglo derecho
            Load der
            Store largo       / Guardamos la posición de fin del subarreglo derecho
            Jump quickSort    / Llamada recursiva pa
			
PUSH, Load X
      Storei pila
      Subt uno
      Store pila
      Jump siguiente

POP,  Load pila
      Add uno
      Store pila
      Loadi pila
      Store X
      Jump siguiente
		
        